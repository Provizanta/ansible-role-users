---

- name: pre-process passwords
  set_fact:
    _obfuscated_users_list: "{%- set x=[] -%}
      {%- for user in users_list -%}
      {%-   if 'pass' in user -%}
      {{-     x.append(user | combine({'pass': (user['pass'] | password_hash(users_password_hash))})) -}}
      {%-   else -%}
      {{-     x.append(user) -}}
      {%-   endif -%}
      {%- endfor -%}
      {{ x }}"

- name: assert proper user configuration
  loop: "{{ _obfuscated_users_list }}"
  assert:
    that:
      - item.name is defined
      - item.pass is defined or item.ssh_pubkey is defined
  tags: always

- name: find current users
  getent:
    database: passwd

- name: prepare user id facts
  set_fact:
    _users_with_ids: "{%- set x={} -%}
      {%- for user, v in getent_passwd.items() -%}
      {%-   set _ = x.update({user: v[1] | int}) -%}
      {%- endfor -%}
      {{ x }}"

- name: add users with password
  become: true
  loop: "{{ _obfuscated_users_list | selectattr('pass', 'defined') | list }}"
  user:
    name: "{{ item.name }}"
    password: "{{ item.pass  }}"
    shell: "{{ item.shell | default(users_shell) }}"
    groups: "{{ item.groups | default([]) }}"
    append: "{{ users_append_groups }}"
    create_home: "{{ item.create_home | default(users_create_home) }}"
    home: "/home/{{ item.name }}/"
    move_home: true
  changed_when: "'molecule-idempotence-notest' not in ansible_skip_tags"

- name: add users without password
  become: true
  loop: "{{ _obfuscated_users_list | rejectattr('pass', 'defined') | list }}"
  user:
    name: "{{ item.name }}"
    shell: "{{ item.shell | default(users_shell) }}"
    groups: "{{ item.groups | default([]) }}"
    append: "{{ users_append_groups }}"
    create_home: "{{ item.create_home | default(users_create_home) }}"
    home: "/home/{{ item.name }}/"
    move_home: true

- name: add authorized keys
  become: true
  loop: "{{ _obfuscated_users_list | selectattr('ssh_pubkey', 'defined') | list }}"
  authorized_key:
    user: "{{ item.name }}"
    state: present
    key: "{{ item.ssh_pubkey }}"

- name: remove users
  vars:
    desired_users: "{{ _obfuscated_users_list | map(attribute='name') | list }}"
  loop: "{{ _users_with_ids
           | dict2items
           | selectattr('value', 'ge', 1000)
           | selectattr('value', 'le', 29999)
           | list }}"
  when:
    - item.key not in desired_users
  user:
    name: "{{ item.key }}"
    state: absent
    remove: true

- name: remove authorized keys
  become: true
  loop: "{{ _obfuscated_users_list
            | selectattr('ssh_pubkey', 'undefined')
            | map(attribute='name')
            | list }}"
  file:
    path: "/home/{{ item }}/.ssh/authorized_keys"
    state: absent

- name: establish sudo
  become: true
  package:
    name:
      - sudo
    state: present

- name: allow passwordless sudo
  vars:
    _sudoer_group:
      RedHat: wheel
      Debian: sudo
  loop: "{{ _obfuscated_users_list }}"
  become: true
  lineinfile:
    path: "/etc/sudoers.d/{{ item.name }}"
    line: "{{ item.name }} ALL=(ALL) NOPASSWD: ALL"
    owner: root
    group: root
    mode: "ug=r,o="
    state: "{{ users_use_passwordless_sudo and
               (_sudoer_group[ansible_facts['os_family']] in (item.groups | default([])))
               | ternary('present','absent') }}"
    create: true
    validate: "visudo -cf %s"
